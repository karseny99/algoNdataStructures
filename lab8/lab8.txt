Этапы компиляции:



1) Препроцессор — это макро процессор, который преобразовывает вашу программу 
для дальнейшего компилирования. 

На данной стадии происходит происходит работа с препроцессорными директивами. 
Директивы препроцессора представляют собой инструкции, записанные в тексте программы на Си.
Например, препроцессор добавляет хэдеры в код (#include), убирает комментирования, 
заменяет макросы (#define) их значениями, #include - включает содержимое указанного файла



Хэдеры, включенные в программу с помощью директивы #include, 
рекурсивно проходят стадию препроцессинга и включаются в выпускаемый файл 



У нас есть файл программы C с расширением .c , то есть файл hello.c .
Шаг 1 — предварительная обработка заголовочных файлов, все операторы, 
начинающиеся с # (символ решетки), и комментарии заменяются/удаляются во время предварительной обработки с помощью препроцессора. 
Он создает промежуточный файл с расширением .i , то есть файл hello.i 


2) Компиляция

Шаг 2 — компиляция файла hello.i
Программное обеспечение компилятора преобразует файл hello.i в hello.s с инструкциями на уровне сборки (низкоуровневый код).

Компилятор выполняет свою главную задачу — компилирует, 
то есть преобразует полученный на прошлом шаге код без директив в ассемблерный код. 
Это промежуточный шаг между высокоуровневым языком и машинным (бинарным) кодом.

  	

3) Ассемблирование

Шаг 3 – инструкции кода на уровне ассемблера преобразуются ассемблером в машинопонятный код (двоичная/шестнадцатеричная форма). 
Сгенерированный файл известен как объектный файл с расширением .obj / .o , т.е. файл hello.obj / hello.o .

Ассемблер преобразовывает ассемблерный код в машинный код, 
сохраняя его в объектном файле.

Объектный файл — это созданный ассемблером промежуточный файл, 
хранящий кусок машинного кода. 
Этот кусок машинного кода, 
который еще не был связан вместе с другими кусками машинного кода в конечную выполняемую программу, 
называется объектным кодом.


4) Линковщик
Компоновщик (линкер) связывает все объектные файлы и статические библиотеки
в единый исполняемый файл, 
который мы и сможем запустить в дальнейшем.


Шаг 4. Линковщик используется для связывания файлов библиотеки с объектным файлом для определения неизвестных операторов. Он создает исполняемый файл с расширением .exe / .out , то есть файл hello.exe / hello.out .
Затем мы можем запустить исполняемый файл hello.exe / hello.out , чтобы получить желаемый вывод в нашем окне вывода, т. е. Hello World! .


crt0 - набор стартовых программ, которые линкуются принудительно с файлом

static - переменная или функция, которая видна только в файле, в котором она объявлена

extern сообщает компилятору, что переменная или функции где-то определены и будут связаны линковщиком


5) Загрузка

Последний этап, который предстоит пройти нашей программе — вызвать загрузчик для загрузки нашей программы в память.
На данной стадии также возможна подгрузка динамических библиотек.


 // для лабы 8ой сделать ошибку линка + рантайма





































